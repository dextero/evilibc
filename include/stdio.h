#ifndef __EVILIBC_STDIO_H
#define __EVILIBC_STDIO_H

#include "stddef.h"
#include "stdarg.h"

#ifdef __cplusplus
extern "C" {
#endif

/*
 * 7.21.1:
 * > The types declared are size_t (described in 7.19);
 * >    FILE
 * > which is an object type capable of recording all the information needed
 * > to control a stream, including its file position indicator, a pointer
 * > to its associated buffer (if any), an error indicator that records
 * > whether a read/write error has occurred, and an end-of-file indicator
 * > that records whether the end of the file has been reached; [...]
 */
typedef struct __evilibc_file FILE;

/*
 * 7.21.1:
 * > [...] and
 * >    fpos_t
 * > which is a complete object type other than an array type capable of
 * > recording all the information needed to specify uniquely every position
 * > within a file.
 */
typedef union {
    long double _because_why_not;
    unsigned long _offset;
} fpos_t;

/*
 * 7.21.1:
 * > The macros are NULL (described in 7.19);
 * >    _IOFBF
 * >    _IOLBF
 * >    _IONBF
 * > which expand to integer constant expressions with distinct values,
 * > suitable for use as the third argument to the setvbuf function; [...]
 */
#define _IOFBF (-0xfbf)
#define _IOLBF 0x1bf
#define _IONBF 0x0bf

/*
 * 7.21.1:
 * >    BUFSIZ
 * > which expands to an integer constant expression that is the size of
 * > the buffer used by the setbuf function;
 *
 * 7.21.2:
 * > The value of the macro BUFSIZ shall be at least 256.
 */
#define BUFSIZ 256

/* 7.21.1:
 * >    EOF
 * > which expands to an integer constant expression, with type int and a
 * > negative value, that is returned by several functions to indicate
 * > end-of-file, that is, no more input from a stream;
 *
 * Most commonly defined as -1.
 */
#define EOF (-0xE0F)

/*
 * 7.21.1:
 * >    FOPEN_MAX
 * > which expands to an integer constant expression that is the minimum
 * > number of files that the implementation guarantees can be open
 * > simultaneously;
 *
 * 7.21.2:
 * > The value of FOPEN_MAX shall be at least eight, including the three
 * > standard text streams.
 */
#define FOPEN_MAX 8

/*
 * 7.21.1:
 * >    FILENAME_MAX
 * > which expands to an integer constant expression that is the size needed
 * > for an array of char large enough to hold the longest file name string
 * > that the implementation guarantees can be opened; [265]
 * >
 * > [265] If the implementation imposes no practical limit on the length of
 * > file name strings, the value of FILENAME_MAX should instead be the
 * > recommended size of an array intended to hold a file name string. Of
 * > course, file name string contents are subject to other system-specific
 * > constraints; therefore all possible strings of length FILENAME_MAX cannot
 * > be expected to be opened successfully.
 *
 * TODO: it's not limited in any way; could technically be as low as 1 but
 * that would make files completely unusable.
 */
#define FILENAME_MAX 128

/*
 * 7.21.1:
 * >    L_tmpnam
 * > which expands to an integer constant expression that is the size needed
 * > for an array of char large enough to hold a temporary file name string
 * > generated by the tmpnam function;
 *
 * TODO: again, no particular limit.
 */
#define L_tmpnam sizeof("/tmp/X")

/*
 * 7.21.1:
 * >    SEEK_CUR
 * >    SEEK_END
 * >    SEEK_SET
 * > which expand to integer constant expressions with distinct values,
 * > suitable for use as the third argument to the fseek function;
 */
#define SEEK_CUR (-0x5EEC)
#define SEEK_END 0x5EEE
#define SEEK_SET 0x5EE5

/*
 * 7.21.1:
 * >    TMP_MAX
 * > which expands to an integer constant expression that is the minimum
 * > number of unique file names that can be generated by the tmpnam function;
 *
 * 7.21.4:
 * > The value of the macro TMP_MAX shall be at least 25.
 */
#define TMP_MAX 25

/*
 * 7.21.1:
 * >    stderr
 * >    stdin
 * >    stdout
 * > which are expressions of type ‘‘pointer to FILE’’ that point to the FILE
 * > objects associated, respectively, with the standard error, input, and
 * > output streams.
 */
#define stdin  __evilibc_stdin
#define stdout __evilibc_stdout
#define stderr __evilibc_stderr

extern FILE* __evilibc_stdin;
extern FILE* __evilibc_stdout;
extern FILE* __evilibc_stderr;

int remove(const char* filename);
int rename(const char* old_name,
           const char* new_name);

FILE* tmpfile(void);
char* tmpnam(char* s);

int fclose(FILE* stream);
int fflush(FILE* stream);
FILE* fopen(const char* restrict filename,
            const char* restrict mode);
FILE* freopen(const char* restrict filename,
              const char* restrict mode,
              FILE* restrict stream);
void setbuf(FILE* restrict stream,
            char* restrict buf);
int setvbuf(FILE* restrict stream,
            char* restrict buf,
            int mode,
            size_t size);

int fprintf(FILE* restrict stream,
            const char* restrict format,
            ...);
int fscanf(FILE* restrict stream,
           const char* restrict format,
           ...);
int printf(const char* restrict format,
           ...);
int scanf(const char* restrict format,
          ...);
int snprintf(char* restrict s,
             size_t n,
             const char* restrict format,
             ...);
int sprintf(char* restrict s,
            const char* restrict format,
            ...);
int sscanf(const char* restrict s,
           const char* restrict format,
           ...);

int vfprintf(FILE* restrict stream,
             const char* restrict format,
             va_list arg);
int vfscanf(FILE* restrict stream,
            const char* restrict format,
            va_list arg);
int vprintf(const char* restrict format,
            va_list arg);
int vscanf(const char* restrict format,
           va_list arg);
int vsnprintf(char* restrict s,
              size_t n,
              const char* restrict format,
              va_list arg);
int vsprintf(char* restrict s,
             const char* restrict format,
             va_list arg);
int vsscanf(const char* restrict s,
            const char* restrict format,
            va_list arg);

int fgetc(FILE* stream);
int fgets(char* restrict s,
          int n,
          FILE* stream);
int fputc(int c,
          FILE* stream);
int fputs(const char* restrict s,
          FILE* restrict stream);
int getc(FILE* stream);
int getchar(void);
int putc(int c,
         FILE* stream);
int putchar(int c);
int puts(const char* restrict s);
int ungetc(int c, FILE* stream);

size_t fread(void* restrict ptr,
             size_t size,
             size_t nmemb,
             FILE* restrict stream);
size_t fwrite(const void* restrict ptr,
              size_t size,
              size_t nmemb,
              FILE* restrict stream);
int fgetpos(FILE* restrict stream,
            fpos_t* restrict pos);
int fseek(FILE* stream,
          long int offset,
          int whence);
int fsetpos(FILE* stream,
            const fpos_t* pos);
long int ftell(FILE* stream);
void rewind(FILE* stream);

void clearerr(FILE* stream);
int feof(FILE* stream);
int ferror(FILE* stream);
void perror(const char* s);

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* __EVILIBC_STDIO_H */
